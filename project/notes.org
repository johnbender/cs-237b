* plan for project
  Two test suites:

  Puppet (ruby, rspec mocks), example:

  #+begin_src ruby
describe 'ClassifierUtils' do
  it "logs output from the http connection attempt" do
    # tests and mocks/stubs (raises/returns called on the expectation)
    TCPSocket.expects(:open).raises('no-connection')
    OpenSSL::X509::Certificate.expects(:new).with('certkey').returns(stub('cert'))
    OpenSSL::PKey::RSA.expects(:new).with('certkey', nil).returns(stub('key')

    # tests
    expect { handle.get('/hi') }.to raise_error('no-connection')
    expect(testcase.logger.destination.string).to match(/opening connection to foo/)
  end
end
  #+end_src

  Discourse (ruby, rspec mocks), example:

  #+begin_src ruby
describe CommonPasswords do
  describe '#password_list' do
    it "loads the passwords file if redis doesn't have it" do
      # mocks/stubs
      mock_redis = mock("redis")
      mock_redis.stubs(:exists).returns(false)
      mock_redis.stubs(:scard).returns(0)
      described_class.stubs(:redis).returns(mock_redis)

      # test
      described_class.expects(:load_passwords).returns(['password'])
      list = described_class.password_list
      expect(list).to respond_to(:include?)
    end
  end
end
  #+end_src

* impl.

  write down mocks/stubs
  try to follow some method to compute the documentationg
* results
** initial attempt to turn test assumptions into documentation
   assumptions are complicated and large
   the code (not surprisingly) doesn't translate well into docs
   CategoryList example from discourse
** second attempt to refactor tests for better documentation
   note how the first attempt at documenting tests fueled refactor
   assume, prove blocks
   refactoring
   output is still convoluted
** reduced ambition
   just hide all tests
   examine only the assumptions, test descriptions
   can infer a lot from assumptions and test descriptions
   e.g. `educate_until_posts` and "returns a message for user who has not posted any topics"
     implies that educate_until_posts is a threshold for returning a message
** translate to proof format
   ComposerMessageFinder examples
   "defactor"/"distribute" assumptions
   segregate actual proof from assumptions
   distinction between proof and assumptions
** views on tests
   hide actual tests, only show assumptions
   defactor assumptions into each test

* output of hacked rspec/mocha:

#+begin_src bash
vagrant@precise32:/vagrant$ bundle exec rspec --format d spec/components/composer_messages_finder_spec.rb

ComposerMessagesFinder
  delegates work
    `user` exists
    `finder` exists
    `finder`, when sent `check_education_message`
    `finder`, when sent `check_new_user_many_replies`
    `finder`, when sent `check_avatar_notification`
    `finder`, when sent `check_sequential_replies`
    `finder`, when sent `check_dominating_topic`
    `finder`, when sent `check_reviving_old_topic`
    |=
    `finder` calls all the message finders

  .check_education_message
    creating topic
      `user` exists
      `finder` exists
      SiteSetting, when sent `educate_until_posts` returns 10
      `user`, when sent `created_topic_count` returns 9
      |=
      `finder` returns a message for a user who has not posted any topics

      `user` exists
      `finder` exists
      SiteSetting, when sent `educate_until_posts` returns 10
      `user`, when sent `created_topic_count` returns 10
      |=
      `finder` returns no message when the user has posted enough topics

    creating reply
      `user` exists
      `finder` exists
      SiteSetting, when sent `educate_until_posts` returns 10
      `user`, when sent `post_count` returns 9
      |=
      `finder` returns a message for a user who has not posted any topics

      `user` exists
      `finder` exists
      SiteSetting, when sent `educate_until_posts` returns 10
      `user`, when sent `post_count` returns 10
      |=
      `finder` returns no message when the user has posted enough topics

  .check_new_user_many_replies
    replying
      `user` exists
      `finder` exists
      `user`, when sent `posted_too_much_in_topic?` returns false
      |=
      `finder` has no message when `posted_too_much_in_topic?` is false

      `user` exists
      `finder` exists
      `user`, when sent `posted_too_much_in_topic?` returns true
      |=
      `finder` has a message when a user has posted too much


Finished in 0.39291 seconds
5 examples, 0 failures
#+end_src

#+begin_src bash
vagrant@precise32:/vagrant$ bundle exec rspec --format d spec/components/composer_messages_finder_spec.rb

ComposerMessagesFinder
  delegates work
    calls all the message finders
  .check_education_message
    creating topic
      returns a message for a user who has not posted any topics
      returns no message when the user has posted enough topics
    creating reply
      returns a message for a user who has not posted any topics
      returns no message when the user has posted enough topics
  .check_new_user_many_replies
    replying
      has no message when `posted_too_much_in_topic?` is false
      has a message when a user has posted too much
#+end_src
