#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../assets/style.css" />
#+OPTIONS: ^:nil

* purpose
  establishing criteria by which a modularization can be constructed/evaluated

* example
  Vagrant, manipulating a common object structure (virtual machine) using some config.
  Consider three modifications to the vm (there are many more):
  - change memory allocation
  - add shared folder
  - local networking configuration

  others: https://github.com/mitchellh/vagrant/blob/master/plugins/providers/virtualbox/action.rb#L51

  Three different approaches:
  - composed steps (procedure/function composition)
    #+begin_src ruby
    def vm_mod(vm, config)
      vm_change_mem(vm, config)
      vm_shared_folder(vm, config)
      vm_local_network(vm, config)
    end

    vm_mod(vm, config)
    #+end_src

    - cleanup on exception?
    - external state must be carefully communicated between teams
    - vm/config mods must be communicated between teams
    - shared folders over nfs require networking to be done first

  - information hiding (VM class)
    #+begin_src ruby
    class VM
      def initialize(config)
        @config = config
      end

      def mod
        change_mem
        shared_folder
        local_network
      end

      ...
    end

    VM.new(config).mod
    #+end_src

    - hiding from things like CLI
    - bloated class
    - many responsibilities (networking state, shared folder state)
    - cleanup doable (more responsibilities)

  - information hiding (delegates)
    #+begin_src ruby
    class VM
      def initialize(config)
        @config = config
        network = config[:network_provider]
        shared_folder = config[:shared_folder_provider]
      end

      def mod
        change_mem
        network.mod(vm)
        shared_folder.mod(vm)
      end

      ...
    end

    VM.new(config).mod
    #+end_src

    - more composable (swap out providers)
    - more "hidey"
    - mod is static
    - cleanup can be delegated to providers

  - hybrid (middleware)
    #+begin_src ruby
    middleware = builder(config) do |b|
      b.use Customizer
      b.use SharedFoldersProvider
      b.use NetworkProvider
    end

    middleware(vm)
    #+end_src

    - cleanup easy (warden, each middleware defines cleanup)
    - reuse easy (composition is straight forward)
    - responsibilities clear (each step has a middleware/ hides some state)
    - still expects a lot of vm / config

* criteria
  - partially implied by module definition
  - "Each task ...", sort of implies single responsibility?

* expected benefits
  (1) dev time reduced
  - "share nothing" programming
  - what happens if design time is significantly increased?
  - is this a benefit in a single programmer environment?

  (2) drastic changes
  - aims for change to fall within module boundaries
  - is it safe to assume that "drastic change" will happen?

  (3) understood one module at a time
  - designed for better understand which aids better design?
  - does module understanding directly imply system understanding? (composable understanding)

* module def
  - "responsibility assignment"
  - single responsibility principle: "A module (class) should only have one reason to change"

* general thoughts
  assumptions:
  - change will happen
  - current requirements are correct

  questions:
  - can the non-modular design be cheaper in the short term?
  - premature optimization?

  further:
  - alternate school of thought, build dumb, refactor as needed.
  - drive refactoring through testability (eg testing begets DI)
  - seems like the right modularity abstraction is rarely general
