#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+OPTIONS: ^:nil
* mocks as proof assumptions
  "Rational discussion is useful only when there is a significant base of shared assumptions." - Noam Chomsky

  Mocks are like proof assumptions for very weak proofs (test). They assume much and prove little.
  But! Because so much is assumed we can learn about the expected system context from those assumptions.
  To wit, knowing about mocks means knowing the assumptions of a test.
  Knowing the assumptions of a test means knowing about expected system context.
  If we can gather the assumptions of tests encoded by mocks we can understand context.

** mocks/tests: weak in isolation, strong in aggregate
   - they embed the programmers understanding the system
   - they provide some guarantees about behavior, however narrow
   - but how do we harness that information?
   - programmers reading tests have a narrow focus

** mocks as assumptions, tests as proofs
   - when we test using mocks we state our assumptions about context in terms of those mocks
   - tests prove a very particular property under a very particular set of assumptions defined by the mocks

** assumptions can tell us interesting things about a system
   - where should it be executing (posix, etc)
   - what data does it want from external resources (content)
   - how should that data be delivered (format, async/sync, etc)
   - what data should always/sometimes/never exist

* example
  Rails "unit" tests assume quite a bit but the tests tell you little:

  #+begin_src ruby
  # positive test
  def test_full_name
    user = User.find(1)
    assert_equal(user.full_name, "Jim Jones")
  end
  #+end_src

** assumptions
   - ...
   - database exists/accessible
   - user relation exists
   - user relation has at least one tuple
   - user relation has first_name
   - user relation has last_name
   - user relation's first row has first_name=Jim and last_name=Jones

  |----+------------+-----------+-----|
  | id | first_name | last_name | ... |
  |----+------------+-----------+-----|
  | 1  | Jim        | Jones     |     |
  | ?? | ??         | ??        |     |
  |----+------------+-----------+-----|

   provable: first row, the full_name method gets you "Jim Jones"

   not provable: exists a row, full_name != "Jim Jones"

* example
  Addition of negative test tells us more:

  #+begin_src ruby
  # negative
  def test_full_name_not
    user = User.find(2)
    assert(user.full_name != "Jim Jones")
  end
  #+end_src

** assumptions
   - ...
   - database exists/accessible
   - user relation exists
   - user relation has at least one tuple
   - user relation has first_name
   - user relation has last_name
   - user relation's second row does not have first_name=Jim and last_name=Jones

  |----+------------+-----------+-----|
  | id | first_name | last_name | ... |
  |----+------------+-----------+-----|
  |  1 | ??         | ??        |     |
  |  2 | ??         | ??        |     |
  |----+------------+-----------+-----|

   provable: second row, the full_name method does not get you "Jim Jones"

   not provable: exists a row, full_name = anything at all

* working with assumptions
  Now that we know some of the assumptions how can we use them to learn about the system?

** intersection of assumptions
  - ...
  - database exists/accessible
  - user relation exists
  - user relation has at least one tuple
  - user relation has first_name
  - user relation has last_name

  taking the intersection of shared assumptions provides a consistent context
  and elides test specific extra context (second row, first row, etc).
  one could recover most of the schema from these assumptions.

  (side note) a good system for helping people learn about code
  should make it easy to rebuild that system (e.g. recover schema)

** union of assumptions
   given all the assumptions made for all the tests,
   (if they are consistent)
   what can we prove now?

   provable:
   - exists a row, full_name != "Jim Jones"
   - exists a row, full_name = anything at all

* proof theoretic view
  We can track the use of each assumption as in proofs.
  The intersection of all the elided assumptions are the ones we don't care about.

  which argument is better:
  - it's raining, if it's raining the sidewalk is wet, I know that the sidewalk is wet
  - it's raining, if it's raining the sidewalk is wet, oranges taste great, I know that the sidewalk is wet

  Clearly the second is a weaker argument.
  Minimizing assumptions brings clarity to the proof.
  In the same way minimizing assumptions brings clarity to tests and the system.

  #+begin_src
  T |- psi
  -------------- (thinning)
  T, phi |- psi
  #+end_src

  Often programmers use setup methods as a dumping ground for mocking test setup which confuses context.
  Rails sets up a lot of stuff for tests automatically but those things are well defined,
  `setup` methods also define assumptions. We can search through the space of assumption sets to
  find minimal set where tests pass (i.e. proofs go through).

* questions
  - which proofs get grouped? module/class/etc
  - everything is an assumption up to a point, how can we limit the search space of requirements?
  - how many assumptions should we include in the set? shouldn't get all the way down to one's and zeros
  - how do you turn mocked code into readable assumptions? from example, can be derived from test database queries
  - hard to make general, depends on mocking framework?
